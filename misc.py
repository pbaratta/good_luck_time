def abcd(entry):
	entry = list(entry)
	if len(entry) == 5:
		entry[::2] = "abc"
	elif len(entry) == 7:
		entry[::2] = "abcd"
	else:
		print(entry)
		raise Exception("oops")
	return ''.join(entry)

def abcd_all(line):
	return ', '.join(abcd(entry) for entry in line.split(', '))

lines = ['1_0-1=9, 1_0=1+9', '1_0-2=8, 1_0=2+8', '1_0-3=7, 1_0=3+7', '1_0-4=6, 1_0=4+6', '1_0-5=5, 1_0=5+5, 1*0_5=5, 1*0+5=5, 1*0=5-5, 1+0=5/5, 1-0=5/5, 1=0_5/5, 1=0+5/5', '1_0*0=0, 1*0_0=0, 1*0*0=0, 1*0+0=0, 1*0-0=0, 1*0=0_0, 1*0=0*0, 1*0=0+0, 1*0=0-0', '1_0/2=5, 1_0=2*5', '1_0/5=2, 1_0=5*2', '1_0=1_0, 1*0*1=0, 1*0/1=0, 1*0=1*0, 1+0-1=0, 1+0=1+0, 1+0=1-0, 1-0_1=0, 1-0-1=0, 1-0=1+0, 1-0=1-0, 1=0_1+0, 1=0_1-0, 1=0+1+0, 1=0+1-0', '1_1-2=9, 1_1=2+9', '1_1-3=8, 1_1=3+8', '1_1-4=7, 1_1=4+7', '1_1-5=6, 1_1=5+6, 1*1+5=6, 1/1+5=6, 1+1*5=6', '1_1*0=0, 1*1*0=0, 1/1*0=0, 1-1+0=0, 1-1-0=0, 1-1=0_0, 1-1=0*0, 1-1=0+0, 1-1=0-0, 1=1+0_0, 1=1+0*0, 1=1+0+0, 1=1+0-0, 1=1-0_0, 1=1-0*0, 1=1-0+0, 1=1-0-0', '1_1=1_1, 1*1*1=1, 1*1/1=1, 1*1=1*1, 1*1=1/1, 1/1*1=1, 1/1/1=1, 1/1=1*1, 1/1=1/1, 1+1-1=1, 1+1=1+1, 1-1+1=1, 1-1=1-1, 1=1*1*1, 1=1*1/1, 1=1/1*1, 1=1/1/1, 1=1+1-1, 1=1-1+1', '1_2-3=9, 1_2=3+9', '1_2-4=8, 1_2=4+8, 1*2*4=8, 1/2=4/8, 1=2*4/8', '1_2-5=7, 1_2=5+7, 1*2+5=7', '1_2*0=0, 1*2*0=0, 1/2*0=0', '1_2/2=6, 1_2=2*6', '1_2/3=4, 1_2=3*4, 1-2=3-4, 1=2+3-4', '1_2/4=3, 1_2=4*3, 1-2+4=3, 1=2-4+3', '1_2=1_2, 1*2*1=2, 1*2/1=2, 1*2=1*2, 1/2=1/2, 1+2-1=2, 1+2=1+2, 1-2=1-2, 1=2*1/2, 1=2/1/2, 1=2+1-2', '1-1=0, 1=1+0, 1=1-0', '1-1=0*3, 1-1=0/3, 1=1+0*3, 1=1+0/3, 1=1-0*3, 1=1-0/3', '1-1=0*4, 1-1=0/4, 1=1+0*4, 1=1+0/4, 1=1-0*4, 1=1-0/4', '1-1=0*5, 1-1=0/5, 1=1+0*5, 1=1+0/5, 1=1-0*5, 1=1-0/5', '1-1=0*6, 1-1=0/6, 1=1+0*6, 1=1+0/6, 1=1-0*6, 1=1-0/6', '1-1=0*7, 1-1=0/7, 1=1+0*7, 1=1+0/7, 1=1-0*7, 1=1-0/7', '1-1=0*8, 1-1=0/8, 1=1+0*8, 1=1+0/8, 1=1-0*8, 1=1-0/8', '1-1=0*9, 1-1=0/9, 1=1_0-9, 1=1+0*9, 1=1+0/9, 1=1-0*9, 1=1-0/9', '1-1=3*0, 1=1+3*0, 1=1-3*0', '1-1=4*0, 1=1+4*0, 1=1-4*0', '1-1=5*0, 1=1+5*0, 1=1-5*0', '1-2+1=0, 1=2-1+0, 1=2-1-0', '1-2+3=2, 1=2-3+2', '1-2+5=4, 1=2-5+4', '1-2=2-3, 1=2*2-3, 1=2+2-3', '1-2=4-5, 1=2+4-5', '1-2=5-6, 1=2+5-6', '1*0_1=1, 1*0+1=1, 1*0=1-1, 1/0_1=1, 1+0*1=1, 1+0/1=1, 1+0=1*1, 1+0=1/1, 1-0*1=1, 1-0/1=1, 1-0=1*1, 1-0=1/1, 1=0_1*1, 1=0_1/1, 1=0*1+1, 1=0/1+1, 1=0+1*1, 1=0+1/1', '1*0_2=2, 1*0+2=2, 1*0=2-2, 1+0=2/2, 1-0=2/2, 1=0_2/2, 1=0+2/2', '1*0_3=3, 1*0+3=3, 1*0=3-3, 1+0=3/3, 1-0=3/3, 1=0_3/3, 1=0+3/3', '1*0_4=4, 1*0+4=4, 1*0=4-4, 1+0=4/4, 1-0=4/4, 1=0_4/4, 1=0+4/4', '1*0*2=0, 1*0/2=0, 1*0=2*0', '1*0*3=0, 1*0/3=0, 1*0=3*0', '1*0*4=0, 1*0/4=0, 1*0=4*0', '1*0*5=0, 1*0/5=0, 1*0=5*0', '1*0=0', '1*0=0*1, 1*0=0/1, 1+0_0=1, 1+0*0=1, 1+0+0=1, 1+0-0=1, 1+0=0_1, 1+0=0+1, 1-0_0=1, 1-0*0=1, 1-0+0=1, 1-0-0=1, 1-0=0_1, 1-0=0+1, 1=0_0_1, 1=0_0+1, 1=0*0+1, 1=0+0_1, 1=0+0+1, 1=0-0+1', '1*0=0*2, 1*0=0/2', '1*0=0*3, 1*0=0/3', '1*0=0*4, 1*0=0/4', '1*0=0*5, 1*0=0/5', '1*0=0*6, 1*0=0/6', '1*0=0*7, 1*0=0/7', '1*0=0*8, 1*0=0/8', '1*0=0*9, 1*0=0/9', '1*1-1=0, 1*1=1+0, 1*1=1-0, 1/1-1=0, 1/1=1+0, 1/1=1-0, 1-1*1=0, 1-1/1=0, 1-1=1*0, 1=1*1+0, 1=1*1-0, 1=1/1+0, 1=1/1-0, 1=1+1*0, 1=1-1*0', '1*1*2=2, 1*1=2/2, 1/1*2=2, 1/1=2/2, 1-1+2=2, 1-1=2-2, 1=1*2/2, 1=1/2*2, 1=1+2-2, 1=1-2+2', '1*1*3=3, 1*1=3/3, 1/1*3=3, 1/1=3/3, 1-1+3=3, 1-1=3-3, 1=1*3/3, 1=1/3*3, 1=1+3-3, 1=1-3+3', '1*1*4=4, 1*1=4/4, 1/1*4=4, 1/1=4/4, 1-1+4=4, 1-1=4-4, 1=1*4/4, 1=1/4*4, 1=1+4-4, 1=1-4+4', '1*1*5=5, 1*1=5/5, 1/1*5=5, 1/1=5/5, 1-1+5=5, 1-1=5-5, 1=1*5/5, 1=1/5*5, 1=1+5-5, 1=1-5+5', '1*1+0=1, 1*1-0=1, 1*1=0_1, 1*1=0+1, 1/1+0=1, 1/1-0=1, 1/1=0_1, 1/1=0+1, 1+1*0=1, 1-1*0=1, 1-1=0*1, 1-1=0/1, 1=1*0_1, 1=1*0+1, 1=1/0_1, 1=1+0*1, 1=1+0/1, 1=1-0*1, 1=1-0/1', '1*1+1=2, 1/1+1=2, 1+1*1=2, 1+1/1=2, 1+1=1*2', '1*1+2=3, 1/1+2=3, 1+1*2=3', '1*1+3=4, 1/1+3=4, 1+1*3=4', '1*1+4=5, 1/1+4=5, 1+1*4=5', '1*1=1, 1/1=1, 1=1*1, 1=1/1', '1*1=2-1, 1/1=2-1, 1+1=2*1, 1+1=2/1, 1=1*2-1', '1*1=3-2, 1/1=3-2, 1=1*3-2', '1*1=4-3, 1/1=4-3, 1=1*4-3', '1*1=5-4, 1/1=5-4, 1=1*5-4', '1*2-1=1, 1*2=1+1, 1=2*1-1, 1=2/1-1, 1=2-1*1, 1=2-1/1', '1*2-2=0, 1*2=2+0, 1*2=2-0, 1-2/2=0, 1=2/2+0, 1=2/2-0', '1*2*2=4, 1*2+2=4, 1/2=2/4, 1=2*2/4', '1*2*3=6, 1/2=3/6, 1+2+3=6, 1=2*3/6', '1*2/2=1, 1*2=2*1, 1*2=2/1, 1/2*2=1, 1+2-2=1, 1+2=2+1, 1-2+2=1, 1=2/2*1, 1=2/2/1, 1=2-2+1', '1*2+0=2, 1*2-0=2, 1*2=0_2, 1*2=0+2, 1=2/0_2', '1*2+1=3, 1+2*1=3, 1+2/1=3, 1+2=1*3', '1*2+3=5, 1=2*3-5', '1*2+4=6', '1*2=2, 1=2/2', '1*2=3-1, 1+2=3*1, 1+2=3/1', '1*2=4/2, 1*2=4-2, 1/2*4=2, 1=2/4*2', '1*2=5-3', '1*3=3, 1=3/3', '1*4=4, 1=4/4', '1*5=5, 1=5/5', '1+0_1=2, 1+0+1=2, 1-0+1=2, 1=0-1+2', '1+0_2=3, 1+0+2=3, 1-0+2=3, 1=0-2+3', '1+0_3=4, 1+0+3=4, 1-0+3=4, 1=0-3+4', '1+0_4=5, 1+0+4=5, 1-0+4=5, 1=0-4+5', '1+0_5=6, 1+0+5=6, 1-0+5=6, 1=0-5+6', '1+0*2=1, 1+0/2=1, 1+0=2-1, 1-0*2=1, 1-0/2=1, 1-0=2-1, 1=0_2-1, 1=0*2+1, 1=0/2+1, 1=0+2-1', '1+0*3=1, 1+0/3=1, 1-0*3=1, 1-0/3=1, 1=0*3+1, 1=0/3+1', '1+0*4=1, 1+0/4=1, 1-0*4=1, 1-0/4=1, 1=0*4+1, 1=0/4+1', '1+0*5=1, 1+0/5=1, 1-0*5=1, 1-0/5=1, 1=0*5+1, 1=0/5+1', '1+0=1, 1-0=1, 1=0_1, 1=0+1', '1+0=3-2, 1-0=3-2, 1=0_3-2, 1=0+3-2', '1+0=4-3, 1-0=4-3, 1=0_4-3, 1=0+4-3', '1+0=5-4, 1-0=5-4, 1=0_5-4, 1=0+5-4', '1+1-2=0, 1+1=2+0, 1+1=2-0, 1-1=2*0, 1=1+2*0, 1=1-2*0', '1+1+0=2, 1+1-0=2, 1+1=0_2, 1+1=0+2, 1-1=0*2, 1-1=0/2, 1=1+0*2, 1=1+0/2, 1=1-0*2, 1=1-0/2', '1+1+1=3', '1+1+2=4', '1+1+3=5', '1+1+4=6', '1+1+5=7', '1+1=2', '1+1=3-1', '1+1=4/2, 1+1=4-2', '1+1=5-3', '1+2-3=0, 1+2=3+0, 1+2=3-0', '1+2*0=1, 1-2*0=1, 1-2=0-1, 1=2*0+1, 1=2+0-1, 1=2-0_1, 1=2-0-1', '1+2*2=5, 1+2+2=5', '1+2*3=7', '1+2*4=9', '1+2/2=2, 1=2-2/2', '1+2+0=3, 1+2-0=3, 1+2=0_3, 1+2=0+3', '1+2+1=4', '1+2+4=7, 1=2*4-7', '1+2+5=8', '1+2=3', '1+2=4-1', '1+2=5-2', '1+3=4', '1+4=5', '1+5=6', '1=2-1', '1=2-3/3', '1=2-4/4', '1=2-5/5', '1=2*5-9', '1=3-2', '1=4-3', '1=5-4', '2-1=1, 2=1+1', '2-2=0, 2=2+0, 2=2-0', '2*0=0', '2*1=2, 2/1=2, 2=1*2', '2*2=4, 2+2=4', '2*3=6', '2*4=8', '2/2=1, 2=2*1, 2=2/1', '2+0=2, 2-0=2, 2=0_2, 2=0+2', '2+1=3', '2+3=5', '2+4=6', '2+5=7', '2=3-1', '2=4/2, 2=4-2', '2=5-3', '3-1=2, 3=1+2', '3-2=1, 3=2+1', '3-3=0, 3=3+0, 3=3-0', '3*0=0', '3*1=3, 3/1=3, 3=1*3', '3*2=6', '3*3=9', '3/3=1, 3=3*1, 3=3/1', '3+0=3, 3-0=3, 3=0_3, 3=0+3', '3+1=4', '3+2=5', '3+3=6', '3+4=7', '3+5=8', '3=4-1', '3=5-2', '4-1=3, 4=1+3', '4-3=1, 4=3+1', '4-4=0, 4=4+0, 4=4-0', '4*0=0', '4*1=4, 4/1=4, 4=1*4', '4*2=8', '4/2=2, 4-2=2, 4=2*2, 4=2+2', '4/4=1, 4=4*1, 4=4/1', '4+0=4, 4-0=4, 4=0_4, 4=0+4', '4+1=5', '4+2=6', '4+3=7', '4+4=8', '4+5=9', '4=5-1', '5-1=4, 5=1+4', '5-2=3, 5=2+3', '5-3=2, 5=3+2', '5-4=1, 5=4+1', '5-5=0, 5=5+0, 5=5-0', '5*0=0', '5*1=5, 5/1=5, 5=1*5', '5/5=1, 5=5*1, 5=5/1', '5+0=5, 5-0=5, 5=0_5, 5=0+5', '5+1=6', '5+2=7', '5+3=8', '5+4=9', '6-1=5, 6=1+5', '6-2=4, 6=2+4', '6-3=3, 6=3+3', '6-4=2, 6=4+2', '6-5=1, 6=5+1', '6*0=0', '6*1=6, 6/1=6, 6=1*6', '6/2=3, 6=2*3', '6/3=2, 6=3*2', '6+0=6, 6-0=6, 6=0_6, 6=0+6', '6+1=7', '6+2=8', '6+3=9', '7-1=6, 7=1+6', '7-2=5, 7=2+5', '7-3=4, 7=3+4', '7-4=3, 7=4+3', '7-5=2, 7=5+2', '7*0=0', '7*1=7, 7/1=7, 7=1*7', '7+0=7, 7-0=7, 7=0_7, 7=0+7', '7+1=8', '7+2=9', '8-1=7, 8=1+7', '8-2=6, 8=2+6', '8-3=5, 8=3+5', '8-4=4, 8=4+4', '8-5=3, 8=5+3', '8*0=0', '8*1=8, 8/1=8, 8=1*8', '8/2=4, 8=2*4', '8/4=2, 8=4*2', '8+0=8, 8-0=8, 8=0_8, 8=0+8', '8+1=9', '9-1=8, 9=1+8', '9-2=7, 9=2+7', '9-3=6, 9=3+6', '9-4=5, 9=4+5', '9-5=4, 9=5+4', '9*0=0', '9*1=9, 9/1=9, 9=1*9', '9/3=3, 9=3*3', '9+0=9, 9-0=9, 9=0_9, 9=0+9']

by_format = defaultdict(list)
for line in lines:
	by_format[abcd_all(line)].append(line)

def format_time(entry):
	nums = entry[::2]
	return nums[:-2] + ":" + nums[-2:]

def gen_test(line):
	entry_list = line.split(", ")
	time_disp = format_time(entry_list[0])
	return f"\t\tself.assertLuckyReasonSet('{time_disp}', set({entry_list}))  # format {f} ({len(by_format[f])} instances)"


singletons = []
keys = sorted(by_format, key=lambda f:len(by_format[f]), reverse=True)

for f in keys:
	if len(by_format[f]) == 1:
		singletons.extend(by_format[f])
		continue
	line = random.choice(by_format[f])
	print(gen_test(line))

print("#"*30)
for _ in range(5):
	line = random.choice(singletons)
	print(gen_test(line))
